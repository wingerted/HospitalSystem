///////////////////////////////////////////////////////////
//  Doctor.cs
//  Implementation of the Class Doctor
//  Generated by Enterprise Architect
//  Created on:      25-6月-2013 14:19:18
//  Original author: Winger
///////////////////////////////////////////////////////////


using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using HospitalSystem.Models;

namespace HospitalSystem.Business
{
    public class Doctor
    {
        private teamworkContext db = new teamworkContext();
        public patient patientModel;

        /// <summary>
        /// 医生输入诊断信息， 更新病人信息，写入数据库
        /// </summary>
        /// <param name="diagnosticMessage"></param>

        public void AddDiagnosticMessage(long doctorId, MedicalInformation medicalInformation)
        {
            medical_record medical_recordModel = new medical_record();
            medical_recordModel.DoctorID = doctorId;
            medical_recordModel.DiseaseDescribe = medicalInformation.Diagnostic;
            medical_recordModel.TreatTime = DateTime.Now;

            AddExamineList(medical_recordModel, medicalInformation.ExamRecord, doctorId);
            
            AddPrescription(medical_recordModel, medicalInformation.MedicineRecord);
             
            patientModel.medical_record.Add(medical_recordModel);

            db.SaveChanges();
        }

        /// <summary>
        /// 输入 检验单条目,  新增入病人检验单信息
        /// </summary>
        /// <param name="examineList"></param>
        public void AddExamineList(medical_record medical_recordModel, List<ViewExamine> examList, long doctorId)
        {
            examine_list examine_listModel = new examine_list();
            examine_listModel.medical_record = medical_recordModel;

            if (examList == null)
            {
                return;
            }

            foreach (var item in examList)
            {
                examine_detail examine_detailModel = new examine_detail();
                examine_detailModel.ProductID = item.ExamineID;
                examine_detailModel.ExamineDoctorID = doctorId;

                examine_listModel.examine_detail.Add(examine_detailModel);
            }

            medical_recordModel.examine_list.Add(examine_listModel);
        }

        /// <summary>
        /// 输入 诊断药品单条目，填入病人药品单
        /// </summary>
        /// <param name="medicineList"></param>
        public void AddPrescription(medical_record medical_recordModel, List<ViewMedicine> medicineList)
        {
            prescription prescriptionModel = new prescription();

            if (medicineList == null)
            {
                return;
            }

            foreach (var item in medicineList)
            {
                medicine_detail medicine_detailModel = new medicine_detail();
                medicine_detailModel.MedicineID = item.MedicineID;
                medicine_detailModel.MedicineNumber = item.MedicineCount;

                prescriptionModel.medicine_detail.Add(medicine_detailModel);
            }

            medical_recordModel.prescriptions.Add(prescriptionModel);
        }

        /// <summary>
        /// 根据病人Id调用数据库得到当前诊断病人
        /// </summary>
        /// <param name="patientId"></param>
        public patient GetCurrentPatient(long patientId)
        {
            patientModel = db.patients.Find(patientId);
            
            return patientModel;
        }


        public List<ExamineRecord> GetExamineRecordList(long patientId)
        {
            List<ExamineRecord> examineList = new List<ExamineRecord>();

            var medicalRecord = db.medical_record.OrderByDescending(m => m.TreatTime).FirstOrDefault(m => m.PatientID == patientId);
            if (medicalRecord != null)
            {
                var examineDetailModelList = medicalRecord
                                               .examine_list.First()
                                               .examine_detail
                                               .ToList();

                foreach (var examineDetail in examineDetailModelList)
                {
                    ExamineRecord examineRecord = new ExamineRecord();
                    examineRecord.ProductId = examineDetail.ProductID.Value;
                    examineRecord.Price = examineDetail.examine_product.ProductPrice.Value;
                    examineRecord.examineDetailId = examineDetail.ExamineDetailID;
                    examineRecord.productDescript = examineDetail.examine_product.ProductDescribe;
                    examineRecord.productName = examineDetail.examine_product.ProductName;

                    examineList.Add(examineRecord);
                }
            }

            return examineList;
        }


        public void AddExamineResult(List<ExamineRecord> examineRecordList, long examineDoctorId)
        {
            foreach (ExamineRecord item in examineRecordList)
            {
                var examineDetilModel = db.examine_detail.Find(item.examineDetailId);
                examineDetilModel.ExamineResult = item.Result;
                examineDetilModel.ExamineDoctorID = examineDoctorId;
                examineDetilModel.ExamineTime = DateTime.Now;
                db.Entry(examineDetilModel).State = EntityState.Modified;
                db.SaveChanges();
            }
        }
    }
}//end Doctor